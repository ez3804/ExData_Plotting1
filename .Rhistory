x<-1:20
x
x<-c(.5, .6)
x
x<-c(true,false)
x<-c(TRUE, FALSE)
X
x
x<-0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
x<-c("a", "b", "c")
as.numeric(x)
as.logical(x)
m<-matrix(nrow=2, ncol=3)
m
dim(m)
attibutes(m)
attributes(m)
attributes(x)
m<-matrix(1:6, nrow=2, ncol=3)
m
dim(m)<-c(2,5)
m
m<-1:10
dim(m)<-c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x<-list(1, "a", TRUE, 1+4i)
x
lm
glm
x<-factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x<-factor(c("yes", "yes", "no", "yes", "no"), level = c("yes", "no"))
x
x<-c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
x<-c(1, 2, NaN, 10, 3)
is.nan(x)
is.na(x)
x<-data.fram(foo=1:4, bar=c(T,T,F,F))
x<-data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
x<-1:3
names(x)
names(x)<-c("foo", "bar", "norf")
names(x)
x<-list(a=1, b=2)
names(x)
m<-matrix(1:4, nrow=2, nrow=2)
m<-matrix(1:4, nrow=2, ncol=2)
namex(x)
install.packages("solidfy")
install.packages("slidify")
install.packages("slidify")
load("~/Box Documents/MOOC/datascitoolbox/datasiencesoursera/HelloWorld.md")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth )
pollutantmean <- function(directory = getwd(), pollutant, id = 1:332) {
source("pollutantmean.R")
setwd("~/Box Documents/MOOC")
library(datasets)
data(iris)
?iris
Sepal.Length$virginica
Sepal.Length(iris)
Sepal.Length(iris3)
mean(Sepal.length)
tapply(iris[1], iris[5], mean)
lapply(iris[1], iris[5], mean)
tapply(iris[1], iris[5], mean, 1)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
exit
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
s<-split(mtcars, mtcars$cyl)
lapply(s, function(x) colMeans(x[, c("mpg", "hp", "drat")]))
debug(ls)
ls
ls
debug(ls)
ls
ls(y~x)
ls
exit
lo
debug
library(datasets)
data(iris)
?iris
s <- split(iris, iris$Sepal.Length)
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
debug(ls)
ls
ls()
2
3
5
library(datasets)
data(iris)
s<-split(iris,iris$Species)
lapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")]))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(hp, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
best<- function(state, outcome) {
## Read outcome data
outcome_data <- read.csv2("outcome-of-care-measures.csv",sep=",",colClasses="character")
## Check that state and outcome are valid
if(!(state %in% outcome_data[,7]))
stop("invalid state")
if(!(outcome %in% c('heart attack','heart failure','pneumonia')))
stop("invalid outcome")
outcome_data<-outcome_data[outcome_data$State==state,]
suppressWarnings(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')]<-sapply(outcome_data[,c('Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia')],as.numeric))
## Return hospital name in that state with lowest 30-day death
## rate
if(outcome=='heart attack'){
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack),"Hospital.Name"],n=1))
}
else if(outcome=='heart failure')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure),"Hospital.Name"],n=1))
else if(outcome=='pneumonia')
as.character(head(outcome_data[order(outcome_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia),"Hospital.Name"],n=1))
}
getwd()
realine ("what is your name?")
readline ("what is your name?")
h<-"hello"
yourname<-readline ("what is your name?")
past(h, yourname)
paste(h, yourname)
source('~/Box Documents/MOOC/rprog-data-ProgAssignment3-data/rankhospital.R')
baskets.of.Granny<-c(12,4, 4, 6, 9, 3)
baskets.of.Geraldine<-c(5,3, 2, 2, 12, 9)
Granny.money<-baskets.of.Granny *120
Geraldine.money<-baskets.of.Geraldine*145
Granny.money+Geraldine.money
log(1:3)
log(1:3, base=6)
x<-log(1:3)
exp(x)
1.33e4
4.12e-2
pi
2/0
4-inf
4-Inf
is.numeric(Granny.money)
numbers[5]
numbers<-30:1
numbers
numbers[5]
x<-sum(numbers)
x
prod(x)
min(Granny.money)
min(baskets.of.Granny)
max(baskets.of.Granny)
cumsum(baskets.of.Granny)
baskets.of.Granny
prod(baskets.of.Granny)
cumprod(baskets.of.Granny)
x<-c("Hello", "World")
length(x)
nchar(x)
letters
LETTERS
letters(12)
letters[14]
str(islands)
names(islands)[1:9]
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
e
plot(x,y)
Rprof()
help Rprof()
Rprof()?
if (!file.exists("data")) {
if (!file.exists("data")) {
source('~/Box Sync/MOOC/GettingAndClearningData/quizz1.R')
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "housing.csv", method = "curl")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("mysql")
install.packages("RMySQL")
library(foreach)
install.packages("foreach" , repos="http://lib.stat.cmu.edu/R/CRAN",dependencies=TRUE)
install.packages("RMySQL")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
install.packages("mysql")
install.packages("RMySQL")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type = "source")
install.packages("/path/to/package/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type="source")
rmysql
if(!file.exists("./data")) (dir.create("./data"))
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
restData <- read.csv("./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
if(!file.exists("./data")) {dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData, n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData$District, na.rm=TRUE)
table(restData$zipCode, useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistric))
any(is.na(restData$councilDistric))
all(restData$zipCode>0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212", "21213"))
restData[restData$zipCode %in% c("21212", "21213")]
restData[restData$zipCode %in% c("21212", "21213"),]
data(UCBAdmissions)
DF= as.data.frame(UCBAdmissions)
summary(DF)
xt<-xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate<-rep(1:9, len = 54)
xt=xtabs(breaks ~., data=warpbreaks)
xt
ftable(xt)
fakeData=rnorm(le5)
object.size(fakeData)
fakeData=rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")
s1<-seq(1,10, by=2); s1
s2<-seq(1,10, length=3); s2
restData$nearMe=restData$neighborhood %in% c("Roland Park", "HomeLand")
table(restData$nearMe)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone~Month, airqaliyt, xlab="Month", ylab="Ozone (ppb)")
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone~Month, airqaulity, xlab="Month", ylab="Ozone (ppb)")
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="blue")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="blue", lty=dash)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="blue", lty="dash")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="blue")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="yellow")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="pink")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple")
?par
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple", lty=2)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple", lty=3)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple", lty=4)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple", lty=0)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col="purple", lty=1)
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone, pch=3))
with(airquality, plot(Wind, Ozone, pch=3, col="A"))
with(airquality, plot(Wind, Ozone, pch=3, col='A'))
with(airquality, plot(Wind, Ozone, pch=3, col="red"))
with(airquality, plot(Wind, Ozone, pch=5, col="red"))
par("lty")
par("col")
setwd("~/Documents/MOOC")
setwd("~/Documents/MOOC/Exploratory_Data_Analysis")
# Read the data file and set date
# Initiate the data file
dataFile <- "./data/household_power_consumption.txt"
# Read the data file and set date
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
setwd("~/Documents/MOOC/Exploratory_Data_Analysis/ExData_Plotting1")
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
